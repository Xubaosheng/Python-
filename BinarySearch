# -*- coding: utf-8 -*-
"""
Created on Tue May  8 17:12:48 2018

@author: Xu
"""
'''
二分查找又叫折半查找，二分查找应该属于减治技术的成功应用。所谓减治法，就是将原问题分解成若干个子问题后，利用了规模为n的原问题的解与较小规模（通常是n/2）的子问题的解之间的关系。 
二分查找利用了记录按关键码有序的特点，其基本思想为：在有序表中，取中间记录作为比较对象，若给定值与中间记录的关键码相等，则查找成功；若给定值小于中间记录的关键码，则在中间记录的左半边继续查找；若给定值大于中间记录的关键码，则在中间记录右半边区继续查找。不断重复上述过程，直到查找成功，或所查找的区域无记录，查找失败。 
二分查找的时间复杂度是O(log(n))，最坏情况下的时间复杂度是O(n)。
'''
def binary_search(list,target):
    list = sorted(list)
    low = 0 #列表索引最小位置
    high = len(list) - 1    #最大位置
    while low <= high:
        mid = (low + high) // 2 #求中间值
        guess = list[mid] 
        if guess == target: #找到目标值
            return mid,list
        if guess > target:  #大于目标值，二分
            high = mid - 1
        else:
            low = mid + 1
    return None
if __name__ == "__main__":
    my_list = [3,1,2,4,6,5,8,7,9]
    print(binary_search(my_list,4))
    print(binary_search(my_list,0))


 
